/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    "/item/owned": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /item/owned
         * @description Get all items owned by the current user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Item"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * /item
         * @description Create an Item
         */
        post: {
            parameters: {
                query: {
                    item_id: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Item"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/item/next": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /item/next
         * @description Suggest next Item Id
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["ItemIdResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/item/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /item/:item_id
         * @description Get an Item by `item_id`
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    item_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Item"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * /item/:item_id
         * @description Delete an Item by `item_id`
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    item_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * /item/:item_id
         * @description Edit an Item by `item_id`
         *     This updates the `name`, `owner_id`, `location_id`, `product_id`, and `media` (linking `"new-media"`, and removing `"removed-media"`)
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    item_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json; charset=utf-8": components["schemas"]["ItemUpdatePayload"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/item/{item_id}/fields": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /item/:item_id/fields
         * @description Get all fields for an Item by `item_id`
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    item_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["ItemDataField"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/item/{item_id}/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /item/:item_id/tags
         * @description Get all tags for an Item by `item_id`
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    item_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Tag"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/item/{item_id}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /item/:item_id/logs
         * @description Get all logs for an Item by `item_id`
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    item_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["LogEntry"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/item/{item_id}/location": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /item/:item_id/location
         * @description Get the location of an Item by `item_id`
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    item_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["ItemLocation"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * /item/:item_id/location
         * @description Update the location of an Item by `item_id`
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    item_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json; charset=utf-8": components["schemas"]["ItemLocation"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["ItemLocation"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/item/{item_id}/media": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /item/:item_id/media
         * @description Get all media for an Item by `item_id`
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    item_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": number[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/item/{item_id}/intelligence/suggest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /item/:item_id/intelligence
         * @description Leverage intelligence to complete your item and product data
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    item_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/event-stream": components["schemas"]["ActorEvent"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /product
         * @description Get all Products
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Product"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * /product
         * @description Create a Product
         *     Product ids are generated by the server
         */
        post: {
            parameters: {
                query: {
                    name: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Product"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product/slim": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /product/slim
         * @description Get all Products (slim)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["ProductSlim"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product/{product_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /product/:product_id
         * @description Get a Product by `product_id`
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    product_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Product"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * /product/:product_id
         * @description Delete a Product by `product_id`
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    product_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * /item/:item_id
         * @description Edit a Product by `product_id`
         *     This updates the `name`, `owner_id`, `location_id`, and `media` (linking `"new-media"`, and removing `"removed-media"`)
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    product_id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json; charset=utf-8": components["schemas"]["ProductUpdatePayload"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/product/{product_id}/media": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /product/:product_id/media
         * @description Get all media for an Product by `product_id`
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    product_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": number[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product/{product_id}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /product/:product_id/logs
         * @description Get all logs for an Product by `product_id`
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    product_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["LogEntry"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/location": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Location"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * /location
         * @description Create a new location
         *
         *     created_at and updated_at are automatically set and do not need to be provided
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json; charset=utf-8": components["schemas"]["Location"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Location"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/location/{location_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    location_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Location"];
                    };
                };
            };
        };
        /**
         * /location/:location_id
         * @description Update a location
         *     At the moment only the name can be updated, media soonTM
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    location_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json; charset=utf-8": components["schemas"]["Location"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Location"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/location/{location_id}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /location/:location_id/items
         * @description Get all items in a location
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    location_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["ItemLocation"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/location/{location_id}/locations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /location/:location_id/locations
         * @description Get all child locations of a location
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    location_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Location"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /media
         * @description Get all media
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Media"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * /media
         * @description Create a new Media
         *     Media ids are generated by the server
         */
        post: {
            parameters: {
                query: {
                    name: string;
                    kind: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Media"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/unassigned": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /media/unassigned
         * @description Get all unassigned media
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Media"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/{media_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /media/:media_id
         * @description Get a Media by `media_id`
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    media_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Media"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * /media/:media_id
         * @description Delete a Media by `media_id`
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    media_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/{media_id}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /media/:media_id/items
         * @description Get all items linked to a media by `media_id`
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    media_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["LinkedItem"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /search
         * @description Search for Items
         */
        get: {
            parameters: {
                query: {
                    query: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["SearchableItem"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/reindex": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * /search/reindex
         * @description Reindex all Items
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /search/tasks
         * @description Get all Search Tasks
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["SearchTask"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/tasks/{task_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * /search/tasks/:task_id
         * @description Refresh a Search Task by `task_id`
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    task_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["SearchTask"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/field/definitions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /field/definitions
         * @description Get all field definitions
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["FieldDefinition"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * /field/definitions
         * @description Create a new field definition
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json; charset=utf-8": components["schemas"]["FieldDefinition"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["FieldDefinition"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/field/definitions/{definition_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * /fields/definitions/:id
         * @description Update a field definition
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    definition_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json; charset=utf-8": components["schemas"]["FieldDefinition"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["FieldDefinition"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /tags
         * @description Get all tags
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Tag"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * /tags
         * @description Create a new tag
         *     Multiple tags with the same name can exist
         *     Tag ids are generated by the server
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json; charset=utf-8": components["schemas"]["Tag"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Tag"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tags/{tag_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /tags/:tag_id
         * @description Get a tag by id
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    tag_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Tag"];
                    };
                };
            };
        };
        /**
         * /tags/:tag_id
         * @description Edit a tag
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    tag_id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json; charset=utf-8": components["schemas"]["Tag"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Tag"];
                    };
                };
            };
        };
        post?: never;
        /**
         * /tags/:tag_id
         * @description Delete a tag
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    tag_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Tag"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /logs
         * @description Get all logs
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["LogEntry"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /me
         * @description Get the current user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["User"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/operators": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["LocalOperator"][];
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json; charset=utf-8": components["schemas"]["LocalOperatorPayload"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["LocalOperator"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/operators/{operator_id}/capabilities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** /operators/:operator_id/capabilities */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    operator_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["OperatorCapabilities"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/operators/{operator_id}/print": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** /operators/:operator_id/print */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    operator_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json; charset=utf-8": components["schemas"]["PrintRequest"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": string;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /user
         * @description List all users
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["User"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /user/:user_id
         * @description Get a User by `user_id`
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    user_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["User"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{user_id}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /user/:user_id/items
         * @description Get all items in a user's location
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    user_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["ItemLocation"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{user_id}/keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /user/:user_id/keys
         * @description Get all API keys for a user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    user_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["UserApiKey"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * /user/:user_id/keys
         * @description Create a new API key for a user
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    user_id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json; charset=utf-8": components["schemas"]["CreateKeyRequest"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["CreateKeyResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{user_id}/keys/{token_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * /user/:user_id/keys/:token_id
         * @description Delete an API key for a user
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    user_id: number;
                    token_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policy/enumerate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /policy/enumerate
         * @description Enumerate the permissions for a user
         */
        get: {
            parameters: {
                query: {
                    /** @description Example: "item" | "product" | "media" | "user" */
                    resource_type: string;
                    /** @description Example: "1234" | "AB123" */
                    resource_id?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Action"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policy/batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * /policy/batch
         * @description Batch enumerate policy requests
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json; charset=utf-8": components["schemas"]["BatchRequest"][];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["BatchResponse"][];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /sessions
         * @description Get all sessions for the current user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Session"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sessions/{session_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * /sessions/:session_id
         * @description Delete a Session by `session_id`
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    session_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Session"][];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instance/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /instance/settings
         * @description Get the instance settings
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["InstanceSettings"];
                    };
                };
            };
        };
        /**
         * /instance/settings
         * @description Update the instance settings
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json; charset=utf-8": components["schemas"]["InstanceSettingsConfigurable"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instance/statistics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /instance/statistics
         * @description Get the instance statistics
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["InstanceStatistics"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instance/statistics/storage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /instance/storage
         * @description Get the instance storage statistics
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["StorageStatistics"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instance/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /instance/version
         * @description Get the instance version & potentially available updates
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["VersionSettings"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /login
         * @description User facing endpoint that redirects to the OpenID Connect authorization URL
         */
        get: {
            parameters: {
                query?: {
                    redirect?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Redirect to the OpenID Connect authorization URL */
                302: {
                    headers: {
                        LOCATION: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain; charset=utf-8": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /callback
         * @description OpenID Connect callback endpoint, redeems the code and issues a session token
         */
        get: {
            parameters: {
                query: {
                    state?: string;
                    scope?: string;
                    hd?: string;
                    authuser?: string;
                    code: string;
                    prompt?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Redirect to the frontend with authentication token */
                302: {
                    headers: {
                        LOCATION: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain; charset=utf-8": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        /** @enum {string} */
        Action: "read" | "write" | "delete";
        ActorEvent: {
            event: string;
            data: unknown;
        };
        BatchRequest: {
            resource_type: string;
            resource_id?: string;
        };
        BatchResponse: {
            resource_type: string;
            resource_id?: string;
            result: components["schemas"]["Action"][];
        };
        BuildDetails: {
            git_hash?: string;
            version: string;
            target: string;
            /** Format: date-time */
            timestamp: string;
        };
        CreateKeyRequest: {
            name: string;
            permissions: string;
        };
        CreateKeyResponse: {
            key: components["schemas"]["UserApiKey"];
            token: string;
        };
        FieldDefinition: {
            definition_id: string;
            kind: components["schemas"]["FieldKind"] & unknown;
            /** @description The name of the field */
            name: string;
            /** @description Description of the field */
            description?: string;
            /** @description Placeholder text for the field */
            placeholder?: string;
            /** @description Icon for the field */
            icon?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        /** @enum {string} */
        FieldKind: "String" | "Number" | "Boolean" | "Json";
        GeminiStatus: {
            models: string[];
        };
        /** @enum {string} */
        IdCasingPreference: "upper" | "lower";
        InstanceModuleStorageStatus: {
            endpoint_url: string;
            bucket: string;
        };
        InstanceModulesStatus: {
            search: boolean;
            intelligence?: components["schemas"]["IntelligenceStatus"];
            storage: components["schemas"]["InstanceModuleStorageStatus"];
        };
        InstanceSettings: {
            id_casing_preference: components["schemas"]["IdCasingPreference"] & unknown;
            /**
             * Format: int64
             * @description When using numeric item IDs, this last ID is used to generate the next ID.
             */
            last_item_id: number;
            build_info: components["schemas"]["BuildDetails"] & unknown;
            modules: components["schemas"]["InstanceModulesStatus"] & unknown;
        };
        InstanceSettingsConfigurable: {
            /** Format: int64 */
            instance_id: number;
            id_casing_preference: components["schemas"]["IdCasingPreference"];
            /** Format: int64 */
            last_item_id: number;
        };
        InstanceStatistics: {
            /** Format: int64 */
            user_count: number;
            /** Format: int64 */
            item_count: number;
            /** Format: int64 */
            media_count: number;
            /** Format: int64 */
            log_count: number;
        };
        IntelligenceStatus: {
            ollama?: components["schemas"]["OllamaStatus"];
            gemini?: components["schemas"]["GeminiStatus"];
        };
        Item: {
            item_id: string;
            name: string;
            /** Format: int32 */
            product_id?: number;
            /** Format: int32 */
            owner_id?: number;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        ItemDataField: {
            item_id: string;
            definition_id: string;
            value: unknown;
            definition_name: string;
            definition_kind: components["schemas"]["FieldKind"];
            definition_description?: string;
            definition_placeholder?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        ItemIdResponse: {
            item_id: string;
        };
        ItemLocation: {
            item_id: string;
            location_id?: string;
            /** Format: int32 */
            location_user_id?: number;
            location_item_id?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        ItemUpdateFieldPayload: {
            definition_id: string;
            /** @description The value of the field
             *     Empty value for deleting the field */
            value: unknown;
        };
        ItemUpdateMediaPayload: {
            status: components["schemas"]["ItemUpdateMediaStatus"];
            /** Format: int32 */
            media_id: number;
        };
        /** @enum {string} */
        ItemUpdateMediaStatus: "new-media" | "removed-media" | "existing-media";
        ItemUpdatePayload: {
            name?: string;
            /** Format: int32 */
            owner_id?: number;
            /** Format: int32 */
            location_id?: number;
            /** Format: int32 */
            product_id?: number;
            media?: components["schemas"]["ItemUpdateMediaPayload"][];
            fields?: components["schemas"]["ItemUpdateFieldPayload"][];
            tags?: number[];
        };
        LinkedItem: {
            item_id: string;
            name: string;
            /**
             * Format: int32
             * @description The first media we find linked to this item
             */
            media_id: number;
        };
        LocalOperator: {
            operator_id: string;
            operator_endpoint: string;
            /** Format: date-time */
            operator_last_heartbeat: string;
        };
        LocalOperatorPayload: {
            operator_id: string;
            operator_endpoint: string;
        };
        Location: {
            location_id: string;
            name: string;
            root_location_id?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        /** @description Represents a log entry
         *     When an action is performed on a resource, a log entry is created
         *     This resource can then be queried by user, resource_type, (resource_type + resource_id), or action */
        LogEntry: {
            /** Format: int32 */
            log_id: number;
            resource_type: string;
            resource_id: string;
            /** Format: int32 */
            user_id: number;
            action: string;
            data: string;
            /** Format: date-time */
            created_at: string;
        };
        Media: {
            /** Format: int32 */
            media_id: number;
            description?: string;
            url: string;
            kind: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        OllamaStatus: {
            models: string[];
        };
        OperatorCapabilities: {
            printers: components["schemas"]["PrintersInfo"];
        };
        PrintRequest: {
            label_template: string;
            printer_id: string;
            label_id: string;
            url: string;
        };
        PrinterInfo: {
            name: string;
            metadata: {
                [key: string]: string;
            };
        };
        PrintersInfo: {
            printers: components["schemas"]["PrinterInfo"][];
        };
        Product: {
            /** Format: int32 */
            product_id: number;
            name: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        ProductSlim: {
            /** Format: int32 */
            product_id: number;
            name: string;
            /** Format: int32 */
            primary_media_id?: number;
        };
        ProductUpdateMediaPayload: {
            status: components["schemas"]["ProductUpdateMediaStatus"];
            /** Format: int32 */
            media_id: number;
        };
        /** @enum {string} */
        ProductUpdateMediaStatus: "new-media" | "removed-media" | "existing-media";
        ProductUpdatePayload: {
            name?: string;
            /** Format: int32 */
            owner_id?: number;
            /** Format: int32 */
            location_id?: number;
            media?: components["schemas"]["ProductUpdateMediaPayload"][];
        };
        /** @description Describes a search task triggered by some user.
         *     This is used to track the progress of a search import task. */
        SearchTask: {
            /** Format: int32 */
            task_id: number;
            /** Format: int64 */
            external_task_id: number;
            status: components["schemas"]["SearchTaskStatus"];
            /** @description TODO: Make this a JSONB column */
            details?: string;
            /** Format: date-time */
            updated_at: string;
        };
        /** @enum {string} */
        SearchTaskStatus: "Enqueued" | "Processing" | "Succeeded" | "Failed" | "Cancelled";
        SearchableItem: {
            item_id: string;
            name: string;
            /** Format: int32 */
            product_id?: number;
            /** Format: int32 */
            owner_id?: number;
            tags?: components["schemas"]["SearchableItemTag"][];
            fields?: components["schemas"]["SearchableItemField"][];
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            vectors?: components["schemas"]["SearchableItemVectors"];
        };
        SearchableItemField: {
            definition_id: string;
            value: unknown;
        };
        SearchableItemTag: {
            tag_id: string;
            name: string;
        };
        SearchableItemVectors: {
            ollama: components["schemas"]["SearchableItemVectorsOllama"];
        };
        SearchableItemVectorsOllama: {
            regenerate: boolean;
        };
        Session: {
            session_id: string;
            /** Format: int32 */
            user_id: number;
            user_agent: string;
            user_ip: string;
            valid: boolean;
            /** Format: date-time */
            last_access: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        StorageStatistics: {
            /** Format: uint64 */
            bucket_file_count: number;
            /** Format: uint64 */
            bucket_disk_size: number;
        };
        Tag: {
            /** Format: int32 */
            tag_id: number;
            name: string;
            color?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        /** @description A user object that is returned to the client
         *     This is a subset of the `UserEntry` struct
         *     Use `UserEntry` to query the database for a user */
        User: {
            /** Format: int32 */
            user_id: number;
            oauth_sub: string;
            name: string;
            /** Format: url */
            picture?: string;
            first_name?: string;
            last_name?: string;
        };
        UserApiKey: {
            /** Format: int32 */
            token_id: number;
            /** Format: int32 */
            user_id: number;
            name: string;
            token: string;
            permissions: string;
        };
        VersionSettings: {
            version: string;
            latest: string;
            update_available: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
