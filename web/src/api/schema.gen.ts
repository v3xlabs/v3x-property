/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    "/item/owned": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /item/owned
         * @description Get all items owned by the current user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Item"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * /item
         * @description Create an Item
         */
        post: {
            parameters: {
                query: {
                    item_id: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Item"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/item/next": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /item/next
         * @description Suggest next Item Id
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["ItemIdResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/item/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /item/:item_id
         * @description Get an Item by `item_id`
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    item_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Item"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * /item/:item_id
         * @description Delete an Item by `item_id`
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    item_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * /item/:item_id
         * @description Edit an Item by `item_id`
         *     This updates the `name`, `owner_id`, `location_id`, `product_id`, and `media` (linking `"new-media"`, and removing `"removed-media"`)
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    item_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json; charset=utf-8": components["schemas"]["ItemUpdatePayload"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/item/{item_id}/media": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /item/:item_id/media
         * @description Get all media for an Item by `item_id`
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    item_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": number[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/item/{item_id}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /item/:item_id/logs
         * @description Get all logs for an Item by `item_id`
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    item_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["LogEntry"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /product
         * @description Get all Products
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Product"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * /product
         * @description Create a Product
         */
        post: {
            parameters: {
                query: {
                    name: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Product"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product/slim": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /product/slim
         * @description Get all Products (slim)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["ProductSlim"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product/{product_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /product/:product_id
         * @description Get a Product by `product_id`
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    product_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Product"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * /product/:product_id
         * @description Delete a Product by `product_id`
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    product_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * /item/:item_id
         * @description Edit a Product by `product_id`
         *     This updates the `name`, `owner_id`, `location_id`, and `media` (linking `"new-media"`, and removing `"removed-media"`)
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    product_id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json; charset=utf-8": components["schemas"]["ProductUpdatePayload"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/product/{product_id}/media": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /product/:product_id/media
         * @description Get all media for an Product by `product_id`
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    product_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": number[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product/{product_id}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /product/:product_id/logs
         * @description Get all logs for an Product by `product_id`
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    product_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["LogEntry"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /media
         * @description Get all media
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Media"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * /media
         * @description Create a new Media
         */
        post: {
            parameters: {
                query: {
                    name: string;
                    kind: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Media"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/unassigned": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /media/unassigned
         * @description Get all unassigned media
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Media"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/{media_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /media/:media_id
         * @description Get a Media by `media_id`
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    media_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Media"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * /media/:media_id
         * @description Delete a Media by `media_id`
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    media_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/{media_id}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /media/:media_id/items
         * @description Get all items linked to a media by `media_id`
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    media_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["LinkedItem"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /search
         * @description Search for Items
         */
        get: {
            parameters: {
                query: {
                    query: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["SearchableItem"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/reindex": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * /search/reindex
         * @description Reindex all Items
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /search/tasks
         * @description Get all Search Tasks
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["SearchTask"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/tasks/{task_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * /search/tasks/:task_id
         * @description Refresh a Search Task by `task_id`
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    task_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["SearchTask"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /logs
         * @description Get all logs
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["LogEntry"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /me
         * @description Get the current user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["User"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /user/:user_id
         * @description Get a User by `user_id`
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    user_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["User"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{user_id}/keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /user/:user_id/keys
         * @description Get all API keys for a user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    user_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["UserApiKey"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * /user/:user_id/keys
         * @description Create a new API key for a user
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    user_id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json; charset=utf-8": components["schemas"]["CreateKeyRequest"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["CreateKeyResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{user_id}/keys/{token_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * /user/:user_id/keys/:token_id
         * @description Delete an API key for a user
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    user_id: number;
                    token_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /sessions
         * @description Get all sessions for the current user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Session"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sessions/{session_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * /sessions/:session_id
         * @description Delete a Session by `session_id`
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    session_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Session"][];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instance/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /instance/settings
         * @description Get the instance settings
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["InstanceSettings"];
                    };
                };
            };
        };
        /**
         * /instance/settings
         * @description Update the instance settings
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json; charset=utf-8": components["schemas"]["InstanceSettingsConfigurable"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /login
         * @description User facing endpoint that redirects to the OpenID Connect authorization URL
         */
        get: {
            parameters: {
                query?: {
                    redirect?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Redirect to the OpenID Connect authorization URL */
                302: {
                    headers: {
                        LOCATION: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain; charset=utf-8": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /callback
         * @description OpenID Connect callback endpoint, redeems the code and issues a session token
         */
        get: {
            parameters: {
                query: {
                    state?: string;
                    scope?: string;
                    hd?: string;
                    authuser?: string;
                    code: string;
                    prompt?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Redirect to the frontend with authentication token */
                302: {
                    headers: {
                        LOCATION: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain; charset=utf-8": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        CreateKeyRequest: {
            name: string;
            permissions: string;
        };
        CreateKeyResponse: {
            key: components["schemas"]["UserApiKey"];
            token: string;
        };
        /** @enum {string} */
        IdCasingPreference: "upper" | "lower";
        InstanceModulesStatus: {
            search: boolean;
            intelligence: boolean;
        };
        InstanceSettings: {
            id_casing_preference: components["schemas"]["IdCasingPreference"] & unknown;
            /**
             * Format: int64
             * @description When using numeric item IDs, this last ID is used to generate the next ID.
             */
            last_item_id: number;
            modules: components["schemas"]["InstanceModulesStatus"];
        };
        InstanceSettingsConfigurable: {
            /** Format: int64 */
            instance_id: number;
            id_casing_preference: components["schemas"]["IdCasingPreference"];
            /** Format: int64 */
            last_item_id: number;
        };
        Item: {
            item_id: string;
            name: string;
            /** Format: int32 */
            product_id?: number;
            /** Format: int32 */
            owner_id?: number;
            /** Format: int32 */
            location_id?: number;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        ItemIdResponse: {
            item_id: string;
        };
        ItemUpdateMediaPayload: {
            status: components["schemas"]["ItemUpdateMediaStatus"];
            /** Format: int32 */
            media_id: number;
        };
        /** @enum {string} */
        ItemUpdateMediaStatus: "new-media" | "removed-media" | "existing-media";
        ItemUpdatePayload: {
            name?: string;
            /** Format: int32 */
            owner_id?: number;
            /** Format: int32 */
            location_id?: number;
            /** Format: int32 */
            product_id?: number;
            media?: components["schemas"]["ItemUpdateMediaPayload"][];
        };
        LinkedItem: {
            item_id: string;
            name: string;
            /**
             * Format: int32
             * @description The first media we find linked to this item
             */
            media_id: number;
        };
        /** @description Represents a log entry
         *     When an action is performed on a resource, a log entry is created
         *     This resource can then be queried by user, resource_type, (resource_type + resource_id), or action */
        LogEntry: {
            /** Format: int32 */
            log_id: number;
            resource_type: string;
            resource_id: string;
            /** Format: int32 */
            user_id: number;
            action: string;
            data: string;
            /** Format: date-time */
            created_at: string;
        };
        Media: {
            /** Format: int32 */
            media_id: number;
            description?: string;
            url: string;
            kind: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        Product: {
            /** Format: int32 */
            product_id: number;
            name: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        ProductSlim: {
            /** Format: int32 */
            product_id: number;
            name: string;
            /** Format: int32 */
            primary_media_id?: number;
        };
        ProductUpdateMediaPayload: {
            status: components["schemas"]["ProductUpdateMediaStatus"];
            /** Format: int32 */
            media_id: number;
        };
        /** @enum {string} */
        ProductUpdateMediaStatus: "new-media" | "removed-media" | "existing-media";
        ProductUpdatePayload: {
            name?: string;
            /** Format: int32 */
            owner_id?: number;
            /** Format: int32 */
            location_id?: number;
            media?: components["schemas"]["ProductUpdateMediaPayload"][];
        };
        /** @description Describes a search task triggered by some user.
         *     This is used to track the progress of a search import task. */
        SearchTask: {
            /** Format: int32 */
            task_id: number;
            /** Format: int64 */
            external_task_id: number;
            status: components["schemas"]["SearchTaskStatus"];
            /** @description TODO: Make this a JSONB column */
            details?: string;
            /** Format: date-time */
            updated_at: string;
        };
        /** @enum {string} */
        SearchTaskStatus: "Enqueued" | "Processing" | "Succeeded" | "Failed" | "Cancelled";
        SearchableItem: {
            item_id: string;
            name: string;
            /** Format: int32 */
            product_id?: number;
            /** Format: int32 */
            owner_id?: number;
            /** Format: int32 */
            location_id?: number;
            fields?: components["schemas"]["SearchableItemField"][];
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            vectors?: components["schemas"]["SearchableItemVectors"];
        };
        SearchableItemField: {
            definition_id: string;
            value: unknown;
        };
        SearchableItemVectors: {
            ollama: components["schemas"]["SearchableItemVectorsOllama"];
        };
        SearchableItemVectorsOllama: {
            regenerate: boolean;
        };
        Session: {
            session_id: string;
            /** Format: int32 */
            user_id: number;
            user_agent: string;
            user_ip: string;
            valid: boolean;
            /** Format: date-time */
            last_access: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        /** @description A user object that is returned to the client
         *     This is a subset of the `UserEntry` struct
         *     Use `UserEntry` to query the database for a user */
        User: {
            /** Format: int32 */
            user_id: number;
            oauth_sub: string;
            name: string;
            /** Format: url */
            picture?: string;
        };
        UserApiKey: {
            /** Format: int32 */
            token_id: number;
            /** Format: int32 */
            user_id: number;
            name: string;
            token: string;
            permissions: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
