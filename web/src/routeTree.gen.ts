/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DebugImport } from './routes/debug'
import { Route as CreateImport } from './routes/create'
import { Route as AboutImport } from './routes/about'
import { Route as ItemIdImport } from './routes/$itemId'
import { Route as IndexImport } from './routes/index'
import { Route as SettingsIndexImport } from './routes/settings/index'
import { Route as SearchIndexImport } from './routes/search/index'
import { Route as ProductsIndexImport } from './routes/products/index'
import { Route as ItemsIndexImport } from './routes/items/index'
import { Route as UserUserIdImport } from './routes/user/$userId'
import { Route as SettingsUsersImport } from './routes/settings/users'
import { Route as SettingsTagsImport } from './routes/settings/tags'
import { Route as SettingsStorageImport } from './routes/settings/storage'
import { Route as SettingsSessionsImport } from './routes/settings/sessions'
import { Route as SettingsSearchImport } from './routes/settings/search'
import { Route as SettingsPatImport } from './routes/settings/pat'
import { Route as SettingsIntelligenceImport } from './routes/settings/intelligence'
import { Route as SettingsBuildImport } from './routes/settings/build'
import { Route as SettingsLogsIndexImport } from './routes/settings/logs/index'
import { Route as SettingsFieldsIndexImport } from './routes/settings/fields/index'
import { Route as ItemItemIdIndexImport } from './routes/item/$itemId/index'
import { Route as ItemItemIdEditImport } from './routes/item/$itemId/edit'

// Create/Update Routes

const DebugRoute = DebugImport.update({
  id: '/debug',
  path: '/debug',
  getParentRoute: () => rootRoute,
} as any)

const CreateRoute = CreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const ItemIdRoute = ItemIdImport.update({
  id: '/$itemId',
  path: '/$itemId',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsIndexRoute = SettingsIndexImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRoute,
} as any)

const SearchIndexRoute = SearchIndexImport.update({
  id: '/search/',
  path: '/search/',
  getParentRoute: () => rootRoute,
} as any)

const ProductsIndexRoute = ProductsIndexImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => rootRoute,
} as any)

const ItemsIndexRoute = ItemsIndexImport.update({
  id: '/items/',
  path: '/items/',
  getParentRoute: () => rootRoute,
} as any)

const UserUserIdRoute = UserUserIdImport.update({
  id: '/user/$userId',
  path: '/user/$userId',
  getParentRoute: () => rootRoute,
} as any)

const SettingsUsersRoute = SettingsUsersImport.update({
  id: '/settings/users',
  path: '/settings/users',
  getParentRoute: () => rootRoute,
} as any)

const SettingsTagsRoute = SettingsTagsImport.update({
  id: '/settings/tags',
  path: '/settings/tags',
  getParentRoute: () => rootRoute,
} as any)

const SettingsStorageRoute = SettingsStorageImport.update({
  id: '/settings/storage',
  path: '/settings/storage',
  getParentRoute: () => rootRoute,
} as any)

const SettingsSessionsRoute = SettingsSessionsImport.update({
  id: '/settings/sessions',
  path: '/settings/sessions',
  getParentRoute: () => rootRoute,
} as any)

const SettingsSearchRoute = SettingsSearchImport.update({
  id: '/settings/search',
  path: '/settings/search',
  getParentRoute: () => rootRoute,
} as any)

const SettingsPatRoute = SettingsPatImport.update({
  id: '/settings/pat',
  path: '/settings/pat',
  getParentRoute: () => rootRoute,
} as any)

const SettingsIntelligenceRoute = SettingsIntelligenceImport.update({
  id: '/settings/intelligence',
  path: '/settings/intelligence',
  getParentRoute: () => rootRoute,
} as any)

const SettingsBuildRoute = SettingsBuildImport.update({
  id: '/settings/build',
  path: '/settings/build',
  getParentRoute: () => rootRoute,
} as any)

const SettingsLogsIndexRoute = SettingsLogsIndexImport.update({
  id: '/settings/logs/',
  path: '/settings/logs/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsFieldsIndexRoute = SettingsFieldsIndexImport.update({
  id: '/settings/fields/',
  path: '/settings/fields/',
  getParentRoute: () => rootRoute,
} as any)

const ItemItemIdIndexRoute = ItemItemIdIndexImport.update({
  id: '/item/$itemId/',
  path: '/item/$itemId/',
  getParentRoute: () => rootRoute,
} as any)

const ItemItemIdEditRoute = ItemItemIdEditImport.update({
  id: '/item/$itemId/edit',
  path: '/item/$itemId/edit',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$itemId': {
      id: '/$itemId'
      path: '/$itemId'
      fullPath: '/$itemId'
      preLoaderRoute: typeof ItemIdImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/create': {
      id: '/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof CreateImport
      parentRoute: typeof rootRoute
    }
    '/debug': {
      id: '/debug'
      path: '/debug'
      fullPath: '/debug'
      preLoaderRoute: typeof DebugImport
      parentRoute: typeof rootRoute
    }
    '/settings/build': {
      id: '/settings/build'
      path: '/settings/build'
      fullPath: '/settings/build'
      preLoaderRoute: typeof SettingsBuildImport
      parentRoute: typeof rootRoute
    }
    '/settings/intelligence': {
      id: '/settings/intelligence'
      path: '/settings/intelligence'
      fullPath: '/settings/intelligence'
      preLoaderRoute: typeof SettingsIntelligenceImport
      parentRoute: typeof rootRoute
    }
    '/settings/pat': {
      id: '/settings/pat'
      path: '/settings/pat'
      fullPath: '/settings/pat'
      preLoaderRoute: typeof SettingsPatImport
      parentRoute: typeof rootRoute
    }
    '/settings/search': {
      id: '/settings/search'
      path: '/settings/search'
      fullPath: '/settings/search'
      preLoaderRoute: typeof SettingsSearchImport
      parentRoute: typeof rootRoute
    }
    '/settings/sessions': {
      id: '/settings/sessions'
      path: '/settings/sessions'
      fullPath: '/settings/sessions'
      preLoaderRoute: typeof SettingsSessionsImport
      parentRoute: typeof rootRoute
    }
    '/settings/storage': {
      id: '/settings/storage'
      path: '/settings/storage'
      fullPath: '/settings/storage'
      preLoaderRoute: typeof SettingsStorageImport
      parentRoute: typeof rootRoute
    }
    '/settings/tags': {
      id: '/settings/tags'
      path: '/settings/tags'
      fullPath: '/settings/tags'
      preLoaderRoute: typeof SettingsTagsImport
      parentRoute: typeof rootRoute
    }
    '/settings/users': {
      id: '/settings/users'
      path: '/settings/users'
      fullPath: '/settings/users'
      preLoaderRoute: typeof SettingsUsersImport
      parentRoute: typeof rootRoute
    }
    '/user/$userId': {
      id: '/user/$userId'
      path: '/user/$userId'
      fullPath: '/user/$userId'
      preLoaderRoute: typeof UserUserIdImport
      parentRoute: typeof rootRoute
    }
    '/items/': {
      id: '/items/'
      path: '/items'
      fullPath: '/items'
      preLoaderRoute: typeof ItemsIndexImport
      parentRoute: typeof rootRoute
    }
    '/products/': {
      id: '/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsIndexImport
      parentRoute: typeof rootRoute
    }
    '/search/': {
      id: '/search/'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchIndexImport
      parentRoute: typeof rootRoute
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexImport
      parentRoute: typeof rootRoute
    }
    '/item/$itemId/edit': {
      id: '/item/$itemId/edit'
      path: '/item/$itemId/edit'
      fullPath: '/item/$itemId/edit'
      preLoaderRoute: typeof ItemItemIdEditImport
      parentRoute: typeof rootRoute
    }
    '/item/$itemId/': {
      id: '/item/$itemId/'
      path: '/item/$itemId'
      fullPath: '/item/$itemId'
      preLoaderRoute: typeof ItemItemIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/settings/fields/': {
      id: '/settings/fields/'
      path: '/settings/fields'
      fullPath: '/settings/fields'
      preLoaderRoute: typeof SettingsFieldsIndexImport
      parentRoute: typeof rootRoute
    }
    '/settings/logs/': {
      id: '/settings/logs/'
      path: '/settings/logs'
      fullPath: '/settings/logs'
      preLoaderRoute: typeof SettingsLogsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$itemId': typeof ItemIdRoute
  '/about': typeof AboutRoute
  '/create': typeof CreateRoute
  '/debug': typeof DebugRoute
  '/settings/build': typeof SettingsBuildRoute
  '/settings/intelligence': typeof SettingsIntelligenceRoute
  '/settings/pat': typeof SettingsPatRoute
  '/settings/search': typeof SettingsSearchRoute
  '/settings/sessions': typeof SettingsSessionsRoute
  '/settings/storage': typeof SettingsStorageRoute
  '/settings/tags': typeof SettingsTagsRoute
  '/settings/users': typeof SettingsUsersRoute
  '/user/$userId': typeof UserUserIdRoute
  '/items': typeof ItemsIndexRoute
  '/products': typeof ProductsIndexRoute
  '/search': typeof SearchIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/item/$itemId/edit': typeof ItemItemIdEditRoute
  '/item/$itemId': typeof ItemItemIdIndexRoute
  '/settings/fields': typeof SettingsFieldsIndexRoute
  '/settings/logs': typeof SettingsLogsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$itemId': typeof ItemIdRoute
  '/about': typeof AboutRoute
  '/create': typeof CreateRoute
  '/debug': typeof DebugRoute
  '/settings/build': typeof SettingsBuildRoute
  '/settings/intelligence': typeof SettingsIntelligenceRoute
  '/settings/pat': typeof SettingsPatRoute
  '/settings/search': typeof SettingsSearchRoute
  '/settings/sessions': typeof SettingsSessionsRoute
  '/settings/storage': typeof SettingsStorageRoute
  '/settings/tags': typeof SettingsTagsRoute
  '/settings/users': typeof SettingsUsersRoute
  '/user/$userId': typeof UserUserIdRoute
  '/items': typeof ItemsIndexRoute
  '/products': typeof ProductsIndexRoute
  '/search': typeof SearchIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/item/$itemId/edit': typeof ItemItemIdEditRoute
  '/item/$itemId': typeof ItemItemIdIndexRoute
  '/settings/fields': typeof SettingsFieldsIndexRoute
  '/settings/logs': typeof SettingsLogsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$itemId': typeof ItemIdRoute
  '/about': typeof AboutRoute
  '/create': typeof CreateRoute
  '/debug': typeof DebugRoute
  '/settings/build': typeof SettingsBuildRoute
  '/settings/intelligence': typeof SettingsIntelligenceRoute
  '/settings/pat': typeof SettingsPatRoute
  '/settings/search': typeof SettingsSearchRoute
  '/settings/sessions': typeof SettingsSessionsRoute
  '/settings/storage': typeof SettingsStorageRoute
  '/settings/tags': typeof SettingsTagsRoute
  '/settings/users': typeof SettingsUsersRoute
  '/user/$userId': typeof UserUserIdRoute
  '/items/': typeof ItemsIndexRoute
  '/products/': typeof ProductsIndexRoute
  '/search/': typeof SearchIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/item/$itemId/edit': typeof ItemItemIdEditRoute
  '/item/$itemId/': typeof ItemItemIdIndexRoute
  '/settings/fields/': typeof SettingsFieldsIndexRoute
  '/settings/logs/': typeof SettingsLogsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$itemId'
    | '/about'
    | '/create'
    | '/debug'
    | '/settings/build'
    | '/settings/intelligence'
    | '/settings/pat'
    | '/settings/search'
    | '/settings/sessions'
    | '/settings/storage'
    | '/settings/tags'
    | '/settings/users'
    | '/user/$userId'
    | '/items'
    | '/products'
    | '/search'
    | '/settings'
    | '/item/$itemId/edit'
    | '/item/$itemId'
    | '/settings/fields'
    | '/settings/logs'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$itemId'
    | '/about'
    | '/create'
    | '/debug'
    | '/settings/build'
    | '/settings/intelligence'
    | '/settings/pat'
    | '/settings/search'
    | '/settings/sessions'
    | '/settings/storage'
    | '/settings/tags'
    | '/settings/users'
    | '/user/$userId'
    | '/items'
    | '/products'
    | '/search'
    | '/settings'
    | '/item/$itemId/edit'
    | '/item/$itemId'
    | '/settings/fields'
    | '/settings/logs'
  id:
    | '__root__'
    | '/'
    | '/$itemId'
    | '/about'
    | '/create'
    | '/debug'
    | '/settings/build'
    | '/settings/intelligence'
    | '/settings/pat'
    | '/settings/search'
    | '/settings/sessions'
    | '/settings/storage'
    | '/settings/tags'
    | '/settings/users'
    | '/user/$userId'
    | '/items/'
    | '/products/'
    | '/search/'
    | '/settings/'
    | '/item/$itemId/edit'
    | '/item/$itemId/'
    | '/settings/fields/'
    | '/settings/logs/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ItemIdRoute: typeof ItemIdRoute
  AboutRoute: typeof AboutRoute
  CreateRoute: typeof CreateRoute
  DebugRoute: typeof DebugRoute
  SettingsBuildRoute: typeof SettingsBuildRoute
  SettingsIntelligenceRoute: typeof SettingsIntelligenceRoute
  SettingsPatRoute: typeof SettingsPatRoute
  SettingsSearchRoute: typeof SettingsSearchRoute
  SettingsSessionsRoute: typeof SettingsSessionsRoute
  SettingsStorageRoute: typeof SettingsStorageRoute
  SettingsTagsRoute: typeof SettingsTagsRoute
  SettingsUsersRoute: typeof SettingsUsersRoute
  UserUserIdRoute: typeof UserUserIdRoute
  ItemsIndexRoute: typeof ItemsIndexRoute
  ProductsIndexRoute: typeof ProductsIndexRoute
  SearchIndexRoute: typeof SearchIndexRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
  ItemItemIdEditRoute: typeof ItemItemIdEditRoute
  ItemItemIdIndexRoute: typeof ItemItemIdIndexRoute
  SettingsFieldsIndexRoute: typeof SettingsFieldsIndexRoute
  SettingsLogsIndexRoute: typeof SettingsLogsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ItemIdRoute: ItemIdRoute,
  AboutRoute: AboutRoute,
  CreateRoute: CreateRoute,
  DebugRoute: DebugRoute,
  SettingsBuildRoute: SettingsBuildRoute,
  SettingsIntelligenceRoute: SettingsIntelligenceRoute,
  SettingsPatRoute: SettingsPatRoute,
  SettingsSearchRoute: SettingsSearchRoute,
  SettingsSessionsRoute: SettingsSessionsRoute,
  SettingsStorageRoute: SettingsStorageRoute,
  SettingsTagsRoute: SettingsTagsRoute,
  SettingsUsersRoute: SettingsUsersRoute,
  UserUserIdRoute: UserUserIdRoute,
  ItemsIndexRoute: ItemsIndexRoute,
  ProductsIndexRoute: ProductsIndexRoute,
  SearchIndexRoute: SearchIndexRoute,
  SettingsIndexRoute: SettingsIndexRoute,
  ItemItemIdEditRoute: ItemItemIdEditRoute,
  ItemItemIdIndexRoute: ItemItemIdIndexRoute,
  SettingsFieldsIndexRoute: SettingsFieldsIndexRoute,
  SettingsLogsIndexRoute: SettingsLogsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$itemId",
        "/about",
        "/create",
        "/debug",
        "/settings/build",
        "/settings/intelligence",
        "/settings/pat",
        "/settings/search",
        "/settings/sessions",
        "/settings/storage",
        "/settings/tags",
        "/settings/users",
        "/user/$userId",
        "/items/",
        "/products/",
        "/search/",
        "/settings/",
        "/item/$itemId/edit",
        "/item/$itemId/",
        "/settings/fields/",
        "/settings/logs/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$itemId": {
      "filePath": "$itemId.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/create": {
      "filePath": "create.tsx"
    },
    "/debug": {
      "filePath": "debug.tsx"
    },
    "/settings/build": {
      "filePath": "settings/build.tsx"
    },
    "/settings/intelligence": {
      "filePath": "settings/intelligence.tsx"
    },
    "/settings/pat": {
      "filePath": "settings/pat.tsx"
    },
    "/settings/search": {
      "filePath": "settings/search.tsx"
    },
    "/settings/sessions": {
      "filePath": "settings/sessions.tsx"
    },
    "/settings/storage": {
      "filePath": "settings/storage.tsx"
    },
    "/settings/tags": {
      "filePath": "settings/tags.tsx"
    },
    "/settings/users": {
      "filePath": "settings/users.tsx"
    },
    "/user/$userId": {
      "filePath": "user/$userId.tsx"
    },
    "/items/": {
      "filePath": "items/index.tsx"
    },
    "/products/": {
      "filePath": "products/index.tsx"
    },
    "/search/": {
      "filePath": "search/index.tsx"
    },
    "/settings/": {
      "filePath": "settings/index.tsx"
    },
    "/item/$itemId/edit": {
      "filePath": "item/$itemId/edit.tsx"
    },
    "/item/$itemId/": {
      "filePath": "item/$itemId/index.tsx"
    },
    "/settings/fields/": {
      "filePath": "settings/fields/index.tsx"
    },
    "/settings/logs/": {
      "filePath": "settings/logs/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
