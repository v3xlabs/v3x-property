/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SessionsImport } from './routes/sessions'
import { Route as DebugImport } from './routes/debug'
import { Route as CreateImport } from './routes/create'
import { Route as AboutImport } from './routes/about'
import { Route as ItemIdImport } from './routes/$itemId'
import { Route as IndexImport } from './routes/index'
import { Route as SettingsIndexImport } from './routes/settings/index'
import { Route as SearchIndexImport } from './routes/search/index'
import { Route as ProductsIndexImport } from './routes/products/index'
import { Route as LogsIndexImport } from './routes/logs/index'
import { Route as ItemsIndexImport } from './routes/items/index'
import { Route as UserUserIdImport } from './routes/user/$userId'
import { Route as SettingsFieldsIndexImport } from './routes/settings/fields/index'
import { Route as ItemItemIdIndexImport } from './routes/item/$itemId/index'
import { Route as ItemItemIdEditImport } from './routes/item/$itemId/edit'

// Create/Update Routes

const SessionsRoute = SessionsImport.update({
  path: '/sessions',
  getParentRoute: () => rootRoute,
} as any)

const DebugRoute = DebugImport.update({
  path: '/debug',
  getParentRoute: () => rootRoute,
} as any)

const CreateRoute = CreateImport.update({
  path: '/create',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const ItemIdRoute = ItemIdImport.update({
  path: '/$itemId',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsIndexRoute = SettingsIndexImport.update({
  path: '/settings/',
  getParentRoute: () => rootRoute,
} as any)

const SearchIndexRoute = SearchIndexImport.update({
  path: '/search/',
  getParentRoute: () => rootRoute,
} as any)

const ProductsIndexRoute = ProductsIndexImport.update({
  path: '/products/',
  getParentRoute: () => rootRoute,
} as any)

const LogsIndexRoute = LogsIndexImport.update({
  path: '/logs/',
  getParentRoute: () => rootRoute,
} as any)

const ItemsIndexRoute = ItemsIndexImport.update({
  path: '/items/',
  getParentRoute: () => rootRoute,
} as any)

const UserUserIdRoute = UserUserIdImport.update({
  path: '/user/$userId',
  getParentRoute: () => rootRoute,
} as any)

const SettingsFieldsIndexRoute = SettingsFieldsIndexImport.update({
  path: '/settings/fields/',
  getParentRoute: () => rootRoute,
} as any)

const ItemItemIdIndexRoute = ItemItemIdIndexImport.update({
  path: '/item/$itemId/',
  getParentRoute: () => rootRoute,
} as any)

const ItemItemIdEditRoute = ItemItemIdEditImport.update({
  path: '/item/$itemId/edit',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$itemId': {
      id: '/$itemId'
      path: '/$itemId'
      fullPath: '/$itemId'
      preLoaderRoute: typeof ItemIdImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/create': {
      id: '/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof CreateImport
      parentRoute: typeof rootRoute
    }
    '/debug': {
      id: '/debug'
      path: '/debug'
      fullPath: '/debug'
      preLoaderRoute: typeof DebugImport
      parentRoute: typeof rootRoute
    }
    '/sessions': {
      id: '/sessions'
      path: '/sessions'
      fullPath: '/sessions'
      preLoaderRoute: typeof SessionsImport
      parentRoute: typeof rootRoute
    }
    '/user/$userId': {
      id: '/user/$userId'
      path: '/user/$userId'
      fullPath: '/user/$userId'
      preLoaderRoute: typeof UserUserIdImport
      parentRoute: typeof rootRoute
    }
    '/items/': {
      id: '/items/'
      path: '/items'
      fullPath: '/items'
      preLoaderRoute: typeof ItemsIndexImport
      parentRoute: typeof rootRoute
    }
    '/logs/': {
      id: '/logs/'
      path: '/logs'
      fullPath: '/logs'
      preLoaderRoute: typeof LogsIndexImport
      parentRoute: typeof rootRoute
    }
    '/products/': {
      id: '/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsIndexImport
      parentRoute: typeof rootRoute
    }
    '/search/': {
      id: '/search/'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchIndexImport
      parentRoute: typeof rootRoute
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexImport
      parentRoute: typeof rootRoute
    }
    '/item/$itemId/edit': {
      id: '/item/$itemId/edit'
      path: '/item/$itemId/edit'
      fullPath: '/item/$itemId/edit'
      preLoaderRoute: typeof ItemItemIdEditImport
      parentRoute: typeof rootRoute
    }
    '/item/$itemId/': {
      id: '/item/$itemId/'
      path: '/item/$itemId'
      fullPath: '/item/$itemId'
      preLoaderRoute: typeof ItemItemIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/settings/fields/': {
      id: '/settings/fields/'
      path: '/settings/fields'
      fullPath: '/settings/fields'
      preLoaderRoute: typeof SettingsFieldsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  ItemIdRoute,
  AboutRoute,
  CreateRoute,
  DebugRoute,
  SessionsRoute,
  UserUserIdRoute,
  ItemsIndexRoute,
  LogsIndexRoute,
  ProductsIndexRoute,
  SearchIndexRoute,
  SettingsIndexRoute,
  ItemItemIdEditRoute,
  ItemItemIdIndexRoute,
  SettingsFieldsIndexRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$itemId",
        "/about",
        "/create",
        "/debug",
        "/sessions",
        "/user/$userId",
        "/items/",
        "/logs/",
        "/products/",
        "/search/",
        "/settings/",
        "/item/$itemId/edit",
        "/item/$itemId/",
        "/settings/fields/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$itemId": {
      "filePath": "$itemId.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/create": {
      "filePath": "create.tsx"
    },
    "/debug": {
      "filePath": "debug.tsx"
    },
    "/sessions": {
      "filePath": "sessions.tsx"
    },
    "/user/$userId": {
      "filePath": "user/$userId.tsx"
    },
    "/items/": {
      "filePath": "items/index.tsx"
    },
    "/logs/": {
      "filePath": "logs/index.tsx"
    },
    "/products/": {
      "filePath": "products/index.tsx"
    },
    "/search/": {
      "filePath": "search/index.tsx"
    },
    "/settings/": {
      "filePath": "settings/index.tsx"
    },
    "/item/$itemId/edit": {
      "filePath": "item/$itemId/edit.tsx"
    },
    "/item/$itemId/": {
      "filePath": "item/$itemId/index.tsx"
    },
    "/settings/fields/": {
      "filePath": "settings/fields/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
