/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DebugImport } from './routes/debug'
import { Route as CreateImport } from './routes/create'
import { Route as AboutImport } from './routes/about'
import { Route as ItemIdImport } from './routes/$itemId'
import { Route as IndexImport } from './routes/index'
import { Route as SearchIndexImport } from './routes/search/index'
import { Route as ProductsIndexImport } from './routes/products/index'
import { Route as ItemsIndexImport } from './routes/items/index'
import { Route as UserUserIdImport } from './routes/user/$userId'
import { Route as TagTagIdImport } from './routes/tag/$tagId'
import { Route as SettingsLayoutImport } from './routes/settings/_layout'
import { Route as SettingsLayoutIndexImport } from './routes/settings/_layout/index'
import { Route as LocationLocationIdIndexImport } from './routes/location/$locationId/index'
import { Route as ItemItemIdIndexImport } from './routes/item/$itemId/index'
import { Route as SettingsLayoutUsersImport } from './routes/settings/_layout/users'
import { Route as SettingsLayoutTagsImport } from './routes/settings/_layout/tags'
import { Route as SettingsLayoutStorageImport } from './routes/settings/_layout/storage'
import { Route as SettingsLayoutSessionsImport } from './routes/settings/_layout/sessions'
import { Route as SettingsLayoutSearchImport } from './routes/settings/_layout/search'
import { Route as SettingsLayoutPatImport } from './routes/settings/_layout/pat'
import { Route as SettingsLayoutIntelligenceImport } from './routes/settings/_layout/intelligence'
import { Route as SettingsLayoutBuildImport } from './routes/settings/_layout/build'
import { Route as ItemItemIdEditImport } from './routes/item/$itemId/edit'
import { Route as SettingsLayoutTemplatesIndexImport } from './routes/settings/_layout/templates/index'
import { Route as SettingsLayoutOperatorsIndexImport } from './routes/settings/_layout/operators/index'
import { Route as SettingsLayoutLogsIndexImport } from './routes/settings/_layout/logs/index'
import { Route as SettingsLayoutLocationsIndexImport } from './routes/settings/_layout/locations/index'
import { Route as SettingsLayoutFieldsIndexImport } from './routes/settings/_layout/fields/index'
import { Route as SettingsLayoutLocationsExplorerImport } from './routes/settings/_layout/locations/explorer'

// Create Virtual Routes

const SettingsImport = createFileRoute('/settings')()

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const DebugRoute = DebugImport.update({
  id: '/debug',
  path: '/debug',
  getParentRoute: () => rootRoute,
} as any)

const CreateRoute = CreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const ItemIdRoute = ItemIdImport.update({
  id: '/$itemId',
  path: '/$itemId',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SearchIndexRoute = SearchIndexImport.update({
  id: '/search/',
  path: '/search/',
  getParentRoute: () => rootRoute,
} as any)

const ProductsIndexRoute = ProductsIndexImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => rootRoute,
} as any)

const ItemsIndexRoute = ItemsIndexImport.update({
  id: '/items/',
  path: '/items/',
  getParentRoute: () => rootRoute,
} as any)

const UserUserIdRoute = UserUserIdImport.update({
  id: '/user/$userId',
  path: '/user/$userId',
  getParentRoute: () => rootRoute,
} as any)

const TagTagIdRoute = TagTagIdImport.update({
  id: '/tag/$tagId',
  path: '/tag/$tagId',
  getParentRoute: () => rootRoute,
} as any)

const SettingsLayoutRoute = SettingsLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsLayoutIndexRoute = SettingsLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SettingsLayoutRoute,
} as any)

const LocationLocationIdIndexRoute = LocationLocationIdIndexImport.update({
  id: '/location/$locationId/',
  path: '/location/$locationId/',
  getParentRoute: () => rootRoute,
} as any)

const ItemItemIdIndexRoute = ItemItemIdIndexImport.update({
  id: '/item/$itemId/',
  path: '/item/$itemId/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsLayoutUsersRoute = SettingsLayoutUsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => SettingsLayoutRoute,
} as any)

const SettingsLayoutTagsRoute = SettingsLayoutTagsImport.update({
  id: '/tags',
  path: '/tags',
  getParentRoute: () => SettingsLayoutRoute,
} as any)

const SettingsLayoutStorageRoute = SettingsLayoutStorageImport.update({
  id: '/storage',
  path: '/storage',
  getParentRoute: () => SettingsLayoutRoute,
} as any)

const SettingsLayoutSessionsRoute = SettingsLayoutSessionsImport.update({
  id: '/sessions',
  path: '/sessions',
  getParentRoute: () => SettingsLayoutRoute,
} as any)

const SettingsLayoutSearchRoute = SettingsLayoutSearchImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => SettingsLayoutRoute,
} as any)

const SettingsLayoutPatRoute = SettingsLayoutPatImport.update({
  id: '/pat',
  path: '/pat',
  getParentRoute: () => SettingsLayoutRoute,
} as any)

const SettingsLayoutIntelligenceRoute = SettingsLayoutIntelligenceImport.update(
  {
    id: '/intelligence',
    path: '/intelligence',
    getParentRoute: () => SettingsLayoutRoute,
  } as any,
)

const SettingsLayoutBuildRoute = SettingsLayoutBuildImport.update({
  id: '/build',
  path: '/build',
  getParentRoute: () => SettingsLayoutRoute,
} as any)

const ItemItemIdEditRoute = ItemItemIdEditImport.update({
  id: '/item/$itemId/edit',
  path: '/item/$itemId/edit',
  getParentRoute: () => rootRoute,
} as any)

const SettingsLayoutTemplatesIndexRoute =
  SettingsLayoutTemplatesIndexImport.update({
    id: '/templates/',
    path: '/templates/',
    getParentRoute: () => SettingsLayoutRoute,
  } as any)

const SettingsLayoutOperatorsIndexRoute =
  SettingsLayoutOperatorsIndexImport.update({
    id: '/operators/',
    path: '/operators/',
    getParentRoute: () => SettingsLayoutRoute,
  } as any)

const SettingsLayoutLogsIndexRoute = SettingsLayoutLogsIndexImport.update({
  id: '/logs/',
  path: '/logs/',
  getParentRoute: () => SettingsLayoutRoute,
} as any)

const SettingsLayoutLocationsIndexRoute =
  SettingsLayoutLocationsIndexImport.update({
    id: '/locations/',
    path: '/locations/',
    getParentRoute: () => SettingsLayoutRoute,
  } as any)

const SettingsLayoutFieldsIndexRoute = SettingsLayoutFieldsIndexImport.update({
  id: '/fields/',
  path: '/fields/',
  getParentRoute: () => SettingsLayoutRoute,
} as any)

const SettingsLayoutLocationsExplorerRoute =
  SettingsLayoutLocationsExplorerImport.update({
    id: '/locations/explorer',
    path: '/locations/explorer',
    getParentRoute: () => SettingsLayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$itemId': {
      id: '/$itemId'
      path: '/$itemId'
      fullPath: '/$itemId'
      preLoaderRoute: typeof ItemIdImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/create': {
      id: '/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof CreateImport
      parentRoute: typeof rootRoute
    }
    '/debug': {
      id: '/debug'
      path: '/debug'
      fullPath: '/debug'
      preLoaderRoute: typeof DebugImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/settings/_layout': {
      id: '/settings/_layout'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsLayoutImport
      parentRoute: typeof SettingsRoute
    }
    '/tag/$tagId': {
      id: '/tag/$tagId'
      path: '/tag/$tagId'
      fullPath: '/tag/$tagId'
      preLoaderRoute: typeof TagTagIdImport
      parentRoute: typeof rootRoute
    }
    '/user/$userId': {
      id: '/user/$userId'
      path: '/user/$userId'
      fullPath: '/user/$userId'
      preLoaderRoute: typeof UserUserIdImport
      parentRoute: typeof rootRoute
    }
    '/items/': {
      id: '/items/'
      path: '/items'
      fullPath: '/items'
      preLoaderRoute: typeof ItemsIndexImport
      parentRoute: typeof rootRoute
    }
    '/products/': {
      id: '/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsIndexImport
      parentRoute: typeof rootRoute
    }
    '/search/': {
      id: '/search/'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchIndexImport
      parentRoute: typeof rootRoute
    }
    '/item/$itemId/edit': {
      id: '/item/$itemId/edit'
      path: '/item/$itemId/edit'
      fullPath: '/item/$itemId/edit'
      preLoaderRoute: typeof ItemItemIdEditImport
      parentRoute: typeof rootRoute
    }
    '/settings/_layout/build': {
      id: '/settings/_layout/build'
      path: '/build'
      fullPath: '/settings/build'
      preLoaderRoute: typeof SettingsLayoutBuildImport
      parentRoute: typeof SettingsLayoutImport
    }
    '/settings/_layout/intelligence': {
      id: '/settings/_layout/intelligence'
      path: '/intelligence'
      fullPath: '/settings/intelligence'
      preLoaderRoute: typeof SettingsLayoutIntelligenceImport
      parentRoute: typeof SettingsLayoutImport
    }
    '/settings/_layout/pat': {
      id: '/settings/_layout/pat'
      path: '/pat'
      fullPath: '/settings/pat'
      preLoaderRoute: typeof SettingsLayoutPatImport
      parentRoute: typeof SettingsLayoutImport
    }
    '/settings/_layout/search': {
      id: '/settings/_layout/search'
      path: '/search'
      fullPath: '/settings/search'
      preLoaderRoute: typeof SettingsLayoutSearchImport
      parentRoute: typeof SettingsLayoutImport
    }
    '/settings/_layout/sessions': {
      id: '/settings/_layout/sessions'
      path: '/sessions'
      fullPath: '/settings/sessions'
      preLoaderRoute: typeof SettingsLayoutSessionsImport
      parentRoute: typeof SettingsLayoutImport
    }
    '/settings/_layout/storage': {
      id: '/settings/_layout/storage'
      path: '/storage'
      fullPath: '/settings/storage'
      preLoaderRoute: typeof SettingsLayoutStorageImport
      parentRoute: typeof SettingsLayoutImport
    }
    '/settings/_layout/tags': {
      id: '/settings/_layout/tags'
      path: '/tags'
      fullPath: '/settings/tags'
      preLoaderRoute: typeof SettingsLayoutTagsImport
      parentRoute: typeof SettingsLayoutImport
    }
    '/settings/_layout/users': {
      id: '/settings/_layout/users'
      path: '/users'
      fullPath: '/settings/users'
      preLoaderRoute: typeof SettingsLayoutUsersImport
      parentRoute: typeof SettingsLayoutImport
    }
    '/item/$itemId/': {
      id: '/item/$itemId/'
      path: '/item/$itemId'
      fullPath: '/item/$itemId'
      preLoaderRoute: typeof ItemItemIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/location/$locationId/': {
      id: '/location/$locationId/'
      path: '/location/$locationId'
      fullPath: '/location/$locationId'
      preLoaderRoute: typeof LocationLocationIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/settings/_layout/': {
      id: '/settings/_layout/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof SettingsLayoutIndexImport
      parentRoute: typeof SettingsLayoutImport
    }
    '/settings/_layout/locations/explorer': {
      id: '/settings/_layout/locations/explorer'
      path: '/locations/explorer'
      fullPath: '/settings/locations/explorer'
      preLoaderRoute: typeof SettingsLayoutLocationsExplorerImport
      parentRoute: typeof SettingsLayoutImport
    }
    '/settings/_layout/fields/': {
      id: '/settings/_layout/fields/'
      path: '/fields'
      fullPath: '/settings/fields'
      preLoaderRoute: typeof SettingsLayoutFieldsIndexImport
      parentRoute: typeof SettingsLayoutImport
    }
    '/settings/_layout/locations/': {
      id: '/settings/_layout/locations/'
      path: '/locations'
      fullPath: '/settings/locations'
      preLoaderRoute: typeof SettingsLayoutLocationsIndexImport
      parentRoute: typeof SettingsLayoutImport
    }
    '/settings/_layout/logs/': {
      id: '/settings/_layout/logs/'
      path: '/logs'
      fullPath: '/settings/logs'
      preLoaderRoute: typeof SettingsLayoutLogsIndexImport
      parentRoute: typeof SettingsLayoutImport
    }
    '/settings/_layout/operators/': {
      id: '/settings/_layout/operators/'
      path: '/operators'
      fullPath: '/settings/operators'
      preLoaderRoute: typeof SettingsLayoutOperatorsIndexImport
      parentRoute: typeof SettingsLayoutImport
    }
    '/settings/_layout/templates/': {
      id: '/settings/_layout/templates/'
      path: '/templates'
      fullPath: '/settings/templates'
      preLoaderRoute: typeof SettingsLayoutTemplatesIndexImport
      parentRoute: typeof SettingsLayoutImport
    }
  }
}

// Create and export the route tree

interface SettingsLayoutRouteChildren {
  SettingsLayoutBuildRoute: typeof SettingsLayoutBuildRoute
  SettingsLayoutIntelligenceRoute: typeof SettingsLayoutIntelligenceRoute
  SettingsLayoutPatRoute: typeof SettingsLayoutPatRoute
  SettingsLayoutSearchRoute: typeof SettingsLayoutSearchRoute
  SettingsLayoutSessionsRoute: typeof SettingsLayoutSessionsRoute
  SettingsLayoutStorageRoute: typeof SettingsLayoutStorageRoute
  SettingsLayoutTagsRoute: typeof SettingsLayoutTagsRoute
  SettingsLayoutUsersRoute: typeof SettingsLayoutUsersRoute
  SettingsLayoutIndexRoute: typeof SettingsLayoutIndexRoute
  SettingsLayoutLocationsExplorerRoute: typeof SettingsLayoutLocationsExplorerRoute
  SettingsLayoutFieldsIndexRoute: typeof SettingsLayoutFieldsIndexRoute
  SettingsLayoutLocationsIndexRoute: typeof SettingsLayoutLocationsIndexRoute
  SettingsLayoutLogsIndexRoute: typeof SettingsLayoutLogsIndexRoute
  SettingsLayoutOperatorsIndexRoute: typeof SettingsLayoutOperatorsIndexRoute
  SettingsLayoutTemplatesIndexRoute: typeof SettingsLayoutTemplatesIndexRoute
}

const SettingsLayoutRouteChildren: SettingsLayoutRouteChildren = {
  SettingsLayoutBuildRoute: SettingsLayoutBuildRoute,
  SettingsLayoutIntelligenceRoute: SettingsLayoutIntelligenceRoute,
  SettingsLayoutPatRoute: SettingsLayoutPatRoute,
  SettingsLayoutSearchRoute: SettingsLayoutSearchRoute,
  SettingsLayoutSessionsRoute: SettingsLayoutSessionsRoute,
  SettingsLayoutStorageRoute: SettingsLayoutStorageRoute,
  SettingsLayoutTagsRoute: SettingsLayoutTagsRoute,
  SettingsLayoutUsersRoute: SettingsLayoutUsersRoute,
  SettingsLayoutIndexRoute: SettingsLayoutIndexRoute,
  SettingsLayoutLocationsExplorerRoute: SettingsLayoutLocationsExplorerRoute,
  SettingsLayoutFieldsIndexRoute: SettingsLayoutFieldsIndexRoute,
  SettingsLayoutLocationsIndexRoute: SettingsLayoutLocationsIndexRoute,
  SettingsLayoutLogsIndexRoute: SettingsLayoutLogsIndexRoute,
  SettingsLayoutOperatorsIndexRoute: SettingsLayoutOperatorsIndexRoute,
  SettingsLayoutTemplatesIndexRoute: SettingsLayoutTemplatesIndexRoute,
}

const SettingsLayoutRouteWithChildren = SettingsLayoutRoute._addFileChildren(
  SettingsLayoutRouteChildren,
)

interface SettingsRouteChildren {
  SettingsLayoutRoute: typeof SettingsLayoutRouteWithChildren
}

const SettingsRouteChildren: SettingsRouteChildren = {
  SettingsLayoutRoute: SettingsLayoutRouteWithChildren,
}

const SettingsRouteWithChildren = SettingsRoute._addFileChildren(
  SettingsRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$itemId': typeof ItemIdRoute
  '/about': typeof AboutRoute
  '/create': typeof CreateRoute
  '/debug': typeof DebugRoute
  '/settings': typeof SettingsLayoutRouteWithChildren
  '/tag/$tagId': typeof TagTagIdRoute
  '/user/$userId': typeof UserUserIdRoute
  '/items': typeof ItemsIndexRoute
  '/products': typeof ProductsIndexRoute
  '/search': typeof SearchIndexRoute
  '/item/$itemId/edit': typeof ItemItemIdEditRoute
  '/settings/build': typeof SettingsLayoutBuildRoute
  '/settings/intelligence': typeof SettingsLayoutIntelligenceRoute
  '/settings/pat': typeof SettingsLayoutPatRoute
  '/settings/search': typeof SettingsLayoutSearchRoute
  '/settings/sessions': typeof SettingsLayoutSessionsRoute
  '/settings/storage': typeof SettingsLayoutStorageRoute
  '/settings/tags': typeof SettingsLayoutTagsRoute
  '/settings/users': typeof SettingsLayoutUsersRoute
  '/item/$itemId': typeof ItemItemIdIndexRoute
  '/location/$locationId': typeof LocationLocationIdIndexRoute
  '/settings/': typeof SettingsLayoutIndexRoute
  '/settings/locations/explorer': typeof SettingsLayoutLocationsExplorerRoute
  '/settings/fields': typeof SettingsLayoutFieldsIndexRoute
  '/settings/locations': typeof SettingsLayoutLocationsIndexRoute
  '/settings/logs': typeof SettingsLayoutLogsIndexRoute
  '/settings/operators': typeof SettingsLayoutOperatorsIndexRoute
  '/settings/templates': typeof SettingsLayoutTemplatesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$itemId': typeof ItemIdRoute
  '/about': typeof AboutRoute
  '/create': typeof CreateRoute
  '/debug': typeof DebugRoute
  '/settings': typeof SettingsLayoutIndexRoute
  '/tag/$tagId': typeof TagTagIdRoute
  '/user/$userId': typeof UserUserIdRoute
  '/items': typeof ItemsIndexRoute
  '/products': typeof ProductsIndexRoute
  '/search': typeof SearchIndexRoute
  '/item/$itemId/edit': typeof ItemItemIdEditRoute
  '/settings/build': typeof SettingsLayoutBuildRoute
  '/settings/intelligence': typeof SettingsLayoutIntelligenceRoute
  '/settings/pat': typeof SettingsLayoutPatRoute
  '/settings/search': typeof SettingsLayoutSearchRoute
  '/settings/sessions': typeof SettingsLayoutSessionsRoute
  '/settings/storage': typeof SettingsLayoutStorageRoute
  '/settings/tags': typeof SettingsLayoutTagsRoute
  '/settings/users': typeof SettingsLayoutUsersRoute
  '/item/$itemId': typeof ItemItemIdIndexRoute
  '/location/$locationId': typeof LocationLocationIdIndexRoute
  '/settings/locations/explorer': typeof SettingsLayoutLocationsExplorerRoute
  '/settings/fields': typeof SettingsLayoutFieldsIndexRoute
  '/settings/locations': typeof SettingsLayoutLocationsIndexRoute
  '/settings/logs': typeof SettingsLayoutLogsIndexRoute
  '/settings/operators': typeof SettingsLayoutOperatorsIndexRoute
  '/settings/templates': typeof SettingsLayoutTemplatesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$itemId': typeof ItemIdRoute
  '/about': typeof AboutRoute
  '/create': typeof CreateRoute
  '/debug': typeof DebugRoute
  '/settings': typeof SettingsRouteWithChildren
  '/settings/_layout': typeof SettingsLayoutRouteWithChildren
  '/tag/$tagId': typeof TagTagIdRoute
  '/user/$userId': typeof UserUserIdRoute
  '/items/': typeof ItemsIndexRoute
  '/products/': typeof ProductsIndexRoute
  '/search/': typeof SearchIndexRoute
  '/item/$itemId/edit': typeof ItemItemIdEditRoute
  '/settings/_layout/build': typeof SettingsLayoutBuildRoute
  '/settings/_layout/intelligence': typeof SettingsLayoutIntelligenceRoute
  '/settings/_layout/pat': typeof SettingsLayoutPatRoute
  '/settings/_layout/search': typeof SettingsLayoutSearchRoute
  '/settings/_layout/sessions': typeof SettingsLayoutSessionsRoute
  '/settings/_layout/storage': typeof SettingsLayoutStorageRoute
  '/settings/_layout/tags': typeof SettingsLayoutTagsRoute
  '/settings/_layout/users': typeof SettingsLayoutUsersRoute
  '/item/$itemId/': typeof ItemItemIdIndexRoute
  '/location/$locationId/': typeof LocationLocationIdIndexRoute
  '/settings/_layout/': typeof SettingsLayoutIndexRoute
  '/settings/_layout/locations/explorer': typeof SettingsLayoutLocationsExplorerRoute
  '/settings/_layout/fields/': typeof SettingsLayoutFieldsIndexRoute
  '/settings/_layout/locations/': typeof SettingsLayoutLocationsIndexRoute
  '/settings/_layout/logs/': typeof SettingsLayoutLogsIndexRoute
  '/settings/_layout/operators/': typeof SettingsLayoutOperatorsIndexRoute
  '/settings/_layout/templates/': typeof SettingsLayoutTemplatesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$itemId'
    | '/about'
    | '/create'
    | '/debug'
    | '/settings'
    | '/tag/$tagId'
    | '/user/$userId'
    | '/items'
    | '/products'
    | '/search'
    | '/item/$itemId/edit'
    | '/settings/build'
    | '/settings/intelligence'
    | '/settings/pat'
    | '/settings/search'
    | '/settings/sessions'
    | '/settings/storage'
    | '/settings/tags'
    | '/settings/users'
    | '/item/$itemId'
    | '/location/$locationId'
    | '/settings/'
    | '/settings/locations/explorer'
    | '/settings/fields'
    | '/settings/locations'
    | '/settings/logs'
    | '/settings/operators'
    | '/settings/templates'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$itemId'
    | '/about'
    | '/create'
    | '/debug'
    | '/settings'
    | '/tag/$tagId'
    | '/user/$userId'
    | '/items'
    | '/products'
    | '/search'
    | '/item/$itemId/edit'
    | '/settings/build'
    | '/settings/intelligence'
    | '/settings/pat'
    | '/settings/search'
    | '/settings/sessions'
    | '/settings/storage'
    | '/settings/tags'
    | '/settings/users'
    | '/item/$itemId'
    | '/location/$locationId'
    | '/settings/locations/explorer'
    | '/settings/fields'
    | '/settings/locations'
    | '/settings/logs'
    | '/settings/operators'
    | '/settings/templates'
  id:
    | '__root__'
    | '/'
    | '/$itemId'
    | '/about'
    | '/create'
    | '/debug'
    | '/settings'
    | '/settings/_layout'
    | '/tag/$tagId'
    | '/user/$userId'
    | '/items/'
    | '/products/'
    | '/search/'
    | '/item/$itemId/edit'
    | '/settings/_layout/build'
    | '/settings/_layout/intelligence'
    | '/settings/_layout/pat'
    | '/settings/_layout/search'
    | '/settings/_layout/sessions'
    | '/settings/_layout/storage'
    | '/settings/_layout/tags'
    | '/settings/_layout/users'
    | '/item/$itemId/'
    | '/location/$locationId/'
    | '/settings/_layout/'
    | '/settings/_layout/locations/explorer'
    | '/settings/_layout/fields/'
    | '/settings/_layout/locations/'
    | '/settings/_layout/logs/'
    | '/settings/_layout/operators/'
    | '/settings/_layout/templates/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ItemIdRoute: typeof ItemIdRoute
  AboutRoute: typeof AboutRoute
  CreateRoute: typeof CreateRoute
  DebugRoute: typeof DebugRoute
  SettingsRoute: typeof SettingsRouteWithChildren
  TagTagIdRoute: typeof TagTagIdRoute
  UserUserIdRoute: typeof UserUserIdRoute
  ItemsIndexRoute: typeof ItemsIndexRoute
  ProductsIndexRoute: typeof ProductsIndexRoute
  SearchIndexRoute: typeof SearchIndexRoute
  ItemItemIdEditRoute: typeof ItemItemIdEditRoute
  ItemItemIdIndexRoute: typeof ItemItemIdIndexRoute
  LocationLocationIdIndexRoute: typeof LocationLocationIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ItemIdRoute: ItemIdRoute,
  AboutRoute: AboutRoute,
  CreateRoute: CreateRoute,
  DebugRoute: DebugRoute,
  SettingsRoute: SettingsRouteWithChildren,
  TagTagIdRoute: TagTagIdRoute,
  UserUserIdRoute: UserUserIdRoute,
  ItemsIndexRoute: ItemsIndexRoute,
  ProductsIndexRoute: ProductsIndexRoute,
  SearchIndexRoute: SearchIndexRoute,
  ItemItemIdEditRoute: ItemItemIdEditRoute,
  ItemItemIdIndexRoute: ItemItemIdIndexRoute,
  LocationLocationIdIndexRoute: LocationLocationIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$itemId",
        "/about",
        "/create",
        "/debug",
        "/settings",
        "/tag/$tagId",
        "/user/$userId",
        "/items/",
        "/products/",
        "/search/",
        "/item/$itemId/edit",
        "/item/$itemId/",
        "/location/$locationId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$itemId": {
      "filePath": "$itemId.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/create": {
      "filePath": "create.tsx"
    },
    "/debug": {
      "filePath": "debug.tsx"
    },
    "/settings": {
      "filePath": "settings",
      "children": [
        "/settings/_layout"
      ]
    },
    "/settings/_layout": {
      "filePath": "settings/_layout.tsx",
      "parent": "/settings",
      "children": [
        "/settings/_layout/build",
        "/settings/_layout/intelligence",
        "/settings/_layout/pat",
        "/settings/_layout/search",
        "/settings/_layout/sessions",
        "/settings/_layout/storage",
        "/settings/_layout/tags",
        "/settings/_layout/users",
        "/settings/_layout/",
        "/settings/_layout/locations/explorer",
        "/settings/_layout/fields/",
        "/settings/_layout/locations/",
        "/settings/_layout/logs/",
        "/settings/_layout/operators/",
        "/settings/_layout/templates/"
      ]
    },
    "/tag/$tagId": {
      "filePath": "tag/$tagId.tsx"
    },
    "/user/$userId": {
      "filePath": "user/$userId.tsx"
    },
    "/items/": {
      "filePath": "items/index.tsx"
    },
    "/products/": {
      "filePath": "products/index.tsx"
    },
    "/search/": {
      "filePath": "search/index.tsx"
    },
    "/item/$itemId/edit": {
      "filePath": "item/$itemId/edit.tsx"
    },
    "/settings/_layout/build": {
      "filePath": "settings/_layout/build.tsx",
      "parent": "/settings/_layout"
    },
    "/settings/_layout/intelligence": {
      "filePath": "settings/_layout/intelligence.tsx",
      "parent": "/settings/_layout"
    },
    "/settings/_layout/pat": {
      "filePath": "settings/_layout/pat.tsx",
      "parent": "/settings/_layout"
    },
    "/settings/_layout/search": {
      "filePath": "settings/_layout/search.tsx",
      "parent": "/settings/_layout"
    },
    "/settings/_layout/sessions": {
      "filePath": "settings/_layout/sessions.tsx",
      "parent": "/settings/_layout"
    },
    "/settings/_layout/storage": {
      "filePath": "settings/_layout/storage.tsx",
      "parent": "/settings/_layout"
    },
    "/settings/_layout/tags": {
      "filePath": "settings/_layout/tags.tsx",
      "parent": "/settings/_layout"
    },
    "/settings/_layout/users": {
      "filePath": "settings/_layout/users.tsx",
      "parent": "/settings/_layout"
    },
    "/item/$itemId/": {
      "filePath": "item/$itemId/index.tsx"
    },
    "/location/$locationId/": {
      "filePath": "location/$locationId/index.tsx"
    },
    "/settings/_layout/": {
      "filePath": "settings/_layout/index.tsx",
      "parent": "/settings/_layout"
    },
    "/settings/_layout/locations/explorer": {
      "filePath": "settings/_layout/locations/explorer.tsx",
      "parent": "/settings/_layout"
    },
    "/settings/_layout/fields/": {
      "filePath": "settings/_layout/fields/index.tsx",
      "parent": "/settings/_layout"
    },
    "/settings/_layout/locations/": {
      "filePath": "settings/_layout/locations/index.tsx",
      "parent": "/settings/_layout"
    },
    "/settings/_layout/logs/": {
      "filePath": "settings/_layout/logs/index.tsx",
      "parent": "/settings/_layout"
    },
    "/settings/_layout/operators/": {
      "filePath": "settings/_layout/operators/index.tsx",
      "parent": "/settings/_layout"
    },
    "/settings/_layout/templates/": {
      "filePath": "settings/_layout/templates/index.tsx",
      "parent": "/settings/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
