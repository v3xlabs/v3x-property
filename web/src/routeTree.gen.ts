/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SessionsImport } from './routes/sessions'
import { Route as ItemIdImport } from './routes/$itemId'
import { Route as ItemItemIdIndexImport } from './routes/item/$itemId/index'
import { Route as ItemItemIdEditImport } from './routes/item/$itemId/edit'

// Create Virtual Routes

const CreateLazyImport = createFileRoute('/create')()
const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const CreateLazyRoute = CreateLazyImport.update({
  path: '/create',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/create.lazy').then((d) => d.Route))

const AboutLazyRoute = AboutLazyImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const SessionsRoute = SessionsImport.update({
  path: '/sessions',
  getParentRoute: () => rootRoute,
} as any)

const ItemIdRoute = ItemIdImport.update({
  path: '/$itemId',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ItemItemIdIndexRoute = ItemItemIdIndexImport.update({
  path: '/item/$itemId/',
  getParentRoute: () => rootRoute,
} as any)

const ItemItemIdEditRoute = ItemItemIdEditImport.update({
  path: '/item/$itemId/edit',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/$itemId': {
      id: '/$itemId'
      path: '/$itemId'
      fullPath: '/$itemId'
      preLoaderRoute: typeof ItemIdImport
      parentRoute: typeof rootRoute
    }
    '/sessions': {
      id: '/sessions'
      path: '/sessions'
      fullPath: '/sessions'
      preLoaderRoute: typeof SessionsImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/create': {
      id: '/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof CreateLazyImport
      parentRoute: typeof rootRoute
    }
    '/item/$itemId/edit': {
      id: '/item/$itemId/edit'
      path: '/item/$itemId/edit'
      fullPath: '/item/$itemId/edit'
      preLoaderRoute: typeof ItemItemIdEditImport
      parentRoute: typeof rootRoute
    }
    '/item/$itemId/': {
      id: '/item/$itemId/'
      path: '/item/$itemId'
      fullPath: '/item/$itemId'
      preLoaderRoute: typeof ItemItemIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  ItemIdRoute,
  SessionsRoute,
  AboutLazyRoute,
  CreateLazyRoute,
  ItemItemIdEditRoute,
  ItemItemIdIndexRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$itemId",
        "/sessions",
        "/about",
        "/create",
        "/item/$itemId/edit",
        "/item/$itemId/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/$itemId": {
      "filePath": "$itemId.tsx"
    },
    "/sessions": {
      "filePath": "sessions.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/create": {
      "filePath": "create.lazy.tsx"
    },
    "/item/$itemId/edit": {
      "filePath": "item/$itemId/edit.tsx"
    },
    "/item/$itemId/": {
      "filePath": "item/$itemId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
