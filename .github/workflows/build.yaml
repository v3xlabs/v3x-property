name: üèóÔ∏è Build

# Add at the top level, after 'name:'
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Trigger this workflow when changes happen to our core directories
on:
  push:
    paths:
      - "engine/**" # Our Rust backend
      - "web/**" # Our web frontend
      - ".github/workflows/engine_build.yaml"

# Set up some global variables we'll use throughout
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: v3xlabs/v3x-property/engine
  BINARY_NAME: v3x-property-engine
  DOCKER_BUILDKIT: 1 # Enable BuildKit
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # ü¶Ä First job: Build our Rust backend
  build-engine:
    strategy:
      matrix:
        platform: [x86_64-unknown-linux-musl, aarch64-unknown-linux-musl]
    timeout-minutes: 20 # Prevent hanging builds
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Set up Rust with the specific target we need
      - name: Install Rust
        run: |
          rustup toolchain install stable --profile minimal --no-self-update
          rustup target add x86_64-unknown-linux-musl  # Static linking FTW!

      # musl-tools needed for static compilation
      - name: Install musl-tools
        run: |
          sudo apt-get update --yes && \
          sudo apt-get install --yes musl-tools

      # Speed up builds by caching dependencies
      - name: Cache Rust
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: engine

      # üî® Build our static binary
      - name: Build Rust binary
        working-directory: ./engine
        env:
          BINARY_NAME: ${{ env.BINARY_NAME }}
          SQLX_OFFLINE: true # Use prepared SQL queries
        run: cargo build --target x86_64-unknown-linux-musl --release

      # üì¶ Save our binary for later
      - name: Upload built binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: engine-x86_64-unknown-linux-musl
          path: engine/target/x86_64-unknown-linux-musl/release/${{ env.BINARY_NAME }}
          retention-days: 1 # Save storage by cleaning up quickly
          compression-level: 9 # Maximum compression

      - name: Check binary size
        run: |
          size=$(stat -f %z "engine/target/x86_64-unknown-linux-musl/release/${{ env.BINARY_NAME }}")
          if [ $size -gt 50000000 ]; then
            echo "Binary size exceeds 50MB limit"
            exit 1
          fi

  # üåê Second job: Build our web frontend
  build-web:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Get our Node.js tools ready
      - name: Install Tools & Dependencies
        uses: ./.github/actions/install

      # Build the web assets
      - name: Build
        working-directory: ./web
        run: NODE_ENV=production pnpm run build

      # üì¶ Save our web assets for later
      - name: Upload built web as artifact
        uses: actions/upload-artifact@v4
        with:
          name: web
          path: web/dist

  # üê≥ Final job: Package everything into a Docker image
  docker-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write # For security attestations
      id-token: write
    needs: # Wait for other jobs to finish
      - build-engine
      - build-web
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # üì• Grab our built binary
      - name: Download built binary
        uses: actions/download-artifact@v4
        id: engine-binary
        with:
          name: engine-x86_64-unknown-linux-musl

      # üì• Grab our web assets
      - name: Download built web
        uses: actions/download-artifact@v4
        id: web
        with:
          name: web

      # Set up Docker metadata for nice tags
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=edge
            type=sha

      # Log into GitHub's container registry
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # üöÄ Build and push our final Docker image
      - name: Build docker image using github actions
        uses: docker/build-push-action@v6
        id: push
        with:
          context: ./engine
          file: ./engine/.build/Dockerfile.scratch
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          build-args: |
            BINARY_PATH=${{ steps.engine-binary.outputs.path }}
            WEBUI_PATH=${{ steps.web.outputs.path }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # üîê Generate security attestation for our image
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
