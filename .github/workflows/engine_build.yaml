name: 🏗️ Build Engine Optimized

on:
  push:
    paths:
      - "engine/**"
      - ".github/workflows/engine_build.yaml"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: v3xlabs/v3x-property/engine
  BINARY_NAME: v3x-property-engine

jobs:
  deploy:
    runs-on: ubuntu-20.04
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:17
        # Provide the password for postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: property
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        run: |
          rustup toolchain install stable --profile minimal --no-self-update
          rustup target add x86_64-unknown-linux-musl

      - name: Install musl-tools
        run: |
          sudo apt-get update --yes && \
          sudo apt-get install --yes musl-tools pkg-config musl-dev libssl-dev \
          && sudo ln -s /usr/include/x86_64-linux-gnu/asm /usr/include/x86_64-linux-musl/asm \
          && sudo ln -s /usr/include/asm-generic /usr/include/x86_64-linux-musl/asm-generic \
          && sudo ln -s /usr/include/linux /usr/include/x86_64-linux-musl/linux

      # Add this new step
      - name: Install OpenSSL for musl
        run: |
          mkdir -p /home/runner/openssl && cd /home/runner/openssl \
          && wget https://www.openssl.org/source/openssl-3.0.8.tar.gz \
          && tar xvf openssl-3.0.8.tar.gz \
          && cd openssl-3.0.8 \
          && CC="musl-gcc -fPIC" ./Configure no-shared no-async --prefix=/usr/local/musl --openssldir=/usr/local/musl linux-x86_64 \
          && make -j$(nproc) \
          && sudo make install

      # Add environment variables before the build step
      - name: Set OpenSSL env vars
        run: |
          echo "PKG_CONFIG_SYSROOT_DIR=/usr/local/musl" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/local/musl/lib/pkgconfig" >> $GITHUB_ENV
          echo "OPENSSL_DIR=/usr/local/musl" >> $GITHUB_ENV
          echo "OPENSSL_STATIC=1" >> $GITHUB_ENV

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: engine

      - name: Configure sccache
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.6
        with:
          version: "v0.8.2"

      - name: Create and populate .env
        working-directory: ./engine
        run: |
          touch .env
          echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/property" >> .env

      - name: Migrate DB and prepare sqlx
        working-directory: ./engine
        run: |
          cargo install sqlx-cli --no-default-features --features native-tls,postgres
          sqlx migrate run
          # sqlx prepare

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

            type=edge
            type=sha

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Rust binary
        working-directory: ./engine
        env:
          BINARY_NAME: ${{ env.BINARY_NAME }}
          # SQLX_OFFLINE: true
        run: cargo build --target x86_64-unknown-linux-musl --release

      # Debug log the binary path
      - name: Debug log binary path
        run: |
          echo "Binary path: ${{ steps.binary.outputs.path }}"

      # Add the built binary as an artifact
      - name: Add built binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}
          path: target/x86_64-unknown-linux-musl/release/${{ env.BINARY_NAME }}

      - name: Build docker image using github actions
        uses: docker/build-push-action@v6
        id: push
        with:
          context: ./engine
          file: ./engine/.build/Dockerfile.scratch
          # Metadata
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          # Variables
          build-args: |
            BINARY_PATH=target/x86_64-unknown-linux-musl/release/${{ env.BINARY_NAME }}
          # Testing new build setup
          push: true

      # Testing new build setup
      # - name: Generate artifact attestation
      #   uses: actions/attest-build-provenance@v1
      #   with:
      #     subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      #     subject-digest: ${{ steps.push.outputs.digest }}
      #     push-to-registry: true
